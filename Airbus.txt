//
//  main.cpp
//  Exercise20
//
//  Created by Tan Eu Chian on 03/03/2017.
//  Copyright Â© 2017 Eu Chian Tan. All rights reserved.
//

#include <iostream>
#include <cstdlib>
using namespace std;

//DEFINE ARRAY SIZE
const int n = 8;
const int subn = n/2;

//DECLARE FUNCTION
void sort(int b[], int c[]);
int *merge(int *left, int *right);

//MAIN
int main() {

    //seed random num generator
    srand(time(0));
    
    int a[n], b[(n/2)], c[(n/2)];
    
    cout << "Matrix a: ";
    for (int i=0; i<n; i++){
        a[i] = rand() % (2*n);
        cout << a[i];
        cout.width(5);
    }
    
    //Split a into b and c matrices equally
    for (int i=0; i<=(subn - 1); i++){
        b[i] = a[i];
        c[i] = a[(subn/2)+i];
    }
    
    sort(b, c);
    
    cout << "\n \n";
    cout << "Sorted matrix b: ";
    for (int i=0; i<=(subn - 1); i++){
        cout << b[i];
        cout.width(5);
    }
    
    cout << "\n \n";
    cout << "Sorted matrix c: ";
    for (int i=0; i<=(subn - 1); i++){
        cout << c[i];
        cout.width(5);
    }
    
    //Display Merged Arrays
    cout << "\n \n";
    cout << "Merged Matrix: \n";
    for(int i = 0; i < n; i++){
        
        cout << *( merge(&b[0], &c[0]) + i);
        cout.width(5);
    }
    
    cout << "\n \n";
    return 0;
}

//Sorting function
void sort(int b[], int c[]){
    
    for (int i=0; i<subn; i++){
        
        for (int j=(i+1); j<subn; j++){
            
            int temp = 0;
            
            if ( b[i] > b[j]){
                temp = b[i];
                b[i] = b[j];
                b[j] = temp;
            }
            
            temp = 0;
            
            if ( c[i] > c[j]){
                temp = c[i];
                c[i] = c[j];
                c[j] = temp;
            }
    
        }
    }
}

//Merge function
int *merge(int *left, int *right){
    
    int *pMerged = new int[n];      // Pointer is an array of size n
    copy(left, left + subn , pMerged);  //copy addresses from left to end of left array into merge
    copy(right, right + subn, pMerged + subn);

    return pMerged;
}

